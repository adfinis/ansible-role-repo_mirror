#!/bin/bash
# {{ ansible_managed }}
#
# usage:    This script is used to mirror the {{ item.name }} package repository.
#

repo_name={{ item.name | quote }}
tmp_path={{ repo_mirror_tmp_path | quote }}
base_path={{ repo_mirror_base_path | quote }}/$repo_name
log_file={{ repo_mirror_log_path | quote }}/$repo_name/repo_$repo_name.log
status_file=$base_path.json
owner={{ repo_mirror_user | quote }}

repo_source="{{ item.source_repo }}"
# compute exclude patterns
exclude=""
{% if item.excludes is defined %}
exclude_pattern="{{ item.excludes | join(' ') | default("") }}"
if [ -n "${exclude_pattern}" ]
then
    # Generate rsync exlude list
    for excl in ${exclude_pattern}; do
        exclude="${exclude} --exclude='${excl}'"
    done
fi
{% endif %}

datetime_format={{ repo_mirror_datetime_format | quote }}
bwlimit={{ item.bwlimit | default(repo_mirror_bwlimit) | quote }}
rsync_timeout={{ item.rsync_timeout | default(repo_mirror_rsync_timeout) | quote }}

lock=/tmp/sync_${repo_name}_mirror.lck
rsyncexitcode=-1


function writestatistics() {
    local syncsize="$(du -h "${base_path}" | tail -1 | cut -f1)"
    local synctime="$(date "${datetime_format}")"

    echo "{" > "${status_file}"
    echo "\"size\": \"${syncsize}\"," >> "${status_file}"
    echo "\"time\": \"${synctime}\"," >> "${status_file}"
    echo "\"status\": \"${rsyncexitcode}\""  >> "${status_file}"
    echo "}" >> "${status_file}"
}

function log-message() {
    # usage: log <quit> <"message"> [exitcode]
    # example: log-message 1 "Mirror is already up to date!" 0

    local quit="$1"
    local message="$2"

    echo "[$(date "${datetime_format}")] ${message}" >> "${log_file}"
    echo "---------------------------------------------------------------" >> "${log_file}"

    if [ "${quit}" = 1 ]; then
        local exitcode="$3"
        writestatistics
        exit ${exitcode}
    fi
}

# Running as the incorrect user (probably root) could potentially create files
# with the wrong ownership, leading to issues for later syncs:
if ! username=$(id -un); then
    echo 'Could not obtain user name.'
    exit 1
fi
if [ "$username" != "$owner" ]; then
    echo "Running as $username, but must run as $owner, otherwise this will break future syncs!"
    exit 1
fi

# create lock or exit if already locked in order to prevent multiple syncs
exec 9>"${lock}"
flock -n 9 || log-message 1 "$repo_name mirror rsync job is already running!" 1

# start to rsync the mirror (stage 1)
log-message 0 "Started stage 1 of $repo_name mirror rsync job."
eval rsync --verbose --log-file="${log_file}" --no-motd --human-readable --recursive \
    --hard-links --links --safe-links --times --perms --chmod=u=rwX,go=rX \
    --delay-updates --temp-dir="${tmp_path}" \
    --bwlimit="${bwlimit}" --timeout=120 --contimeout=60 \
    --exclude 'Packages*' --exclude 'Sources*' \
    --exclude 'Release*' \
    "${exclude}" \
    "${repo_source}" \
    "${base_path}"
rsyncexitcode="$?"

if [ "${rsyncexitcode}" = "0" ]; then
    log-message 0 "First stage of rsync done successfully."
else
    log-message 1 "rsync had an error while running the first stage." ${rsyncexitcode}
fi

# start to rsync the mirror (stage 2)
log-message 0 "Started stage 2 of $repo_name mirror rsync job."
eval rsync --verbose --log-file="${log_file}" --no-motd --human-readable --recursive \
    --hard-links --links --safe-links --times --perms --chmod=u=rwX,go=rX \
    --delete-during --temp-dir="${tmp_path}" \
    --bwlimit="${bwlimit}" --timeout=120 --contimeout=60 \
    "${exclude}" \
    "${repo_source}" \
    "${base_path}"
rsyncexitcode="$?"

if [ "${rsyncexitcode}" = "0" ]; then
    log-message 0 "Second stage of rsync done successfully."
    date -u > ${base_path}/project/trace/$(hostname -f)
    log-message 1 "Finished $repo_name mirror rsync job." ${rsyncexitcode} # -> exit 0
else
    log-message 1 "First stage of rsync done successfully." ${rsyncexitcode}
fi
